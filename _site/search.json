{
  "articles": [
    {
      "path": "01_r_intro_contenido.html",
      "title": "Introducción al lenguaje R",
      "author": [],
      "contents": "\r\nLógica sintáctica en R base\r\nCon R base nos referimos a los comandos básicos que vienen incorporados en el R, sin necesidad de cargar librerías.\r\nObjetos\r\nLos Objetos/Elementos constituyen la categoría escencial del R. De hecho, todo en R es un objeto, y se almacena con un nombre específico que no debe poseer espacios. Un número, un vector, una función, la progresión de letras del abecedario, una base de datos, un gráfico, constituyen para R objetos de distinto tipo. Los objetos que vamos creando a medida que trabajamos pueden visualizarse en la panel derecho superior de la pantalla (“Environment”).\r\nOperadores\r\nLos operadores son los símbolos que le indican a R que debe realizar una tarea. Mediante la combinación de datos y operadores es que logramos que R haga su trabajo.\r\nExisten operadores específicos para cada tipo de tarea. Los tipos de operadores principales son los siguientes:\r\nDe asignación\r\nAritméticos\r\nRelacionales\r\nLógicos\r\nOperadores de asignación\r\n\\(<-\\)\r\n\\(=\\)\r\nAmbos operadores sirven para definir objetos, es decir, asignarle un valor. Sin embargo, en la práctica se suele utilizar el operador <- para la definición de objetos, por más que el = sea equivalente. A la izquierda del <- debe ubicarse el nombre que tomará el elemento a crear. Del lado derecho debe ir la definición del mismo.\r\nVeamos un ejemplo:\r\n\r\n\r\nA <- 1\r\nA \r\n\r\n\r\n[1] 1\r\n\r\nAl definir un elemento, el mismo queda guardado en el ambiente del programa, y podrá ser utilizado posteriormente para observar su contenido o para realizar una operación con el mismo.\r\n\r\n\r\nA + 6\r\n\r\n\r\n[1] 7\r\n\r\nAl correr una linea con el nombre del objeto, la consola del programa nos muestra su contenido. Entre corchetes observamos el número de orden del elemento en cuestión.\r\n\r\n\r\nB <- 2\r\nB\r\n\r\n\r\n[1] 2\r\n\r\n<- es un operador Unidireccional, es decir que:\r\nA <- B implica que A va tomar como valor el contenido del objeto B, y no al revés.\r\n\r\n\r\nA <- B\r\n\r\n#Ahora A toma el valor de B, y B continua conservando el mismo valor\r\nA   \r\n\r\n\r\n[1] 2\r\n\r\nB\r\n\r\n\r\n[1] 2\r\n\r\nEn R, cuando se define un objeto con el mismo nombre de un objeto previamente existente, el último reemplaza al primero.\r\nOperadores aritméticos:\r\nSuma: \\(+\\)\r\nResta: \\(-\\)\r\nCociente: \\(/\\)\r\nMultiplicación: \\(*\\)\r\n\r\n\r\n#suma\r\nA <- 5+6\r\nA\r\n\r\n\r\n[1] 11\r\n\r\n#Resta\r\nB <- 6-8\r\nB\r\n\r\n\r\n[1] -2\r\n\r\n#cociente\r\nC <- 6/2\r\nC\r\n\r\n\r\n[1] 3\r\n\r\n#multiplicacion\r\nD <- 6*2\r\nD\r\n\r\n\r\n[1] 12\r\n\r\nOperadores lógicos relacionales:\r\nLos operadores lógicos son usados para describir relaciones, expresadas como verdadero (TRUE) o falso (FALSE).\r\nMayor: \\(>\\)\r\nMayor o igual: \\(>=\\)\r\nMenor: \\(<\\)\r\nMenor o igual: \\(<=\\)\r\nIgual: \\(==\\)\r\nDistinto: \\(!=\\)\r\n\r\n\r\n#Redefinimos los valores A y B\r\nA <- 10\r\nB <- 20\r\n\r\n#Realizamos comparaciones lógicas\r\nA > B\r\n\r\n\r\n[1] FALSE\r\n\r\nA >= B\r\n\r\n\r\n[1] FALSE\r\n\r\nA < B\r\n\r\n\r\n[1] TRUE\r\n\r\nA <= B\r\n\r\n\r\n[1] TRUE\r\n\r\nA == B\r\n\r\n\r\n[1] FALSE\r\n\r\nA != B\r\n\r\n\r\n[1] TRUE\r\n\r\nC <- A != B\r\nC\r\n\r\n\r\n[1] TRUE\r\n\r\nComo muestra el último ejemplo, el resultado de una operación lógica puede almacenarse como el valor de un objeto.\r\nOtros operadores lógicos:\r\nÓ: \\(|\\)\r\nY: \\(&\\)\r\n\r\n\r\n#Redefinimos los valores A y B\r\nA <- 10\r\nB <- 20\r\n#Realizamos comparaciones lógicas\r\n\r\n(A | B) > 30\r\n\r\n\r\n[1] FALSE\r\n\r\n(A & B) <= 30\r\n\r\n\r\n[1] TRUE\r\n\r\nCaracteres especiales\r\nR es sensible a mayúsculas y minúsculas, tanto para los nombres de las variables, como para las funciones y parámetros.\r\nLos espacios en blanco y los carriage return (enter) no son considerados por el lenguaje. Los podemos aprovechar para emprolijar el código y que la lectura sea más simple1.\r\nEl numeral # se utiliza para hacer comentarios. Todo lo que se escribe después del # no es interpretado por R. Se debe utilizar un # por cada línea de código que se desea anular\r\nLos corchetes [] se utilizan para acceder a un objeto:\r\nen un vector[n° orden]\r\nen una tabla[fila, columna]\r\nen una lista[n° elemento]\r\n\r\nel signo $ también es un método de acceso. Particularmente, en los dataframes, nos permitira acceder a una determinada columna de una tabla\r\nLos paréntesis() se utilizan en las funciones para definir los parámetros.\r\nLas comas , se utilizan para separar los parametros al interior de una función.\r\nTipos de Objetos:\r\nExisten un gran cantidad de objetos distintos en R, en lo que respecta al curso trabajaremos principalmente con 4 de ellos:\r\nValores\r\nVectores\r\nData Frames\r\nListas\r\nValores\r\nLos valores pueden ser de distintas clases o tipos:\r\nValores “Numeric” (numéricos)\r\n\r\n\r\nA <- 1\r\nclass(A)\r\n\r\n\r\n[1] \"numeric\"\r\n\r\n\r\nValores ‘Character’ (caracter)\r\n\r\n\r\nA <- \"Hola\"\r\nclass(A)\r\n\r\n\r\n[1] \"character\"\r\n\r\nA <- \"Hola, ¿qué tal?\"\r\nclass(A)\r\n\r\n\r\n[1] \"character\"\r\n\r\nA <- paste('Hola,', '¿qué tal?', sep = \" \")\r\nA\r\n\r\n\r\n[1] \"Hola, ¿qué tal?\"\r\n\r\nclass(A)\r\n\r\n\r\n[1] \"character\"\r\n\r\n\r\nValores de tipo ‘factor’\r\nEn general, es un dato numérico representado por una etiqueta.\r\n\r\n\r\nvalor1 <- \"A\"\r\nclass(valor1)\r\n\r\n\r\n[1] \"character\"\r\n\r\nvalor2 <- factor(\"A\")\r\nvalor2\r\n\r\n\r\n[1] A\r\nLevels: A\r\n\r\n# Otra forma de definir al factor\r\nvalor2 <- factor(valor1)\r\nvalor2\r\n\r\n\r\n[1] A\r\nLevels: A\r\n\r\nclass(valor2)\r\n\r\n\r\n[1] \"factor\"\r\n\r\n# Una propiedad del factor: las etiquetas.\r\nvalor3 <- factor(\"A\",\r\n                 labels = \"Letra A\")\r\nclass(valor3)\r\n\r\n\r\n[1] \"factor\"\r\n\r\nvalor3\r\n\r\n\r\n[1] Letra A\r\nLevels: Letra A\r\n\r\n\r\nLa diferencia entre un character y un factor es que el último tiene solo algunos valores permitidos (levels), con un orden interno predefinido (el cual ,por ejemplo, se respetará a la hora de realizar un gráfico)\r\nVectores\r\nUn vector es un conjunto de datos de un mismo tipo. En otras palabras, es un conjunto de valores de la misma clase. Puede haber vectores númericos, character, factores. Los vectores constituyen la estructura de datos más sencilla de R.\r\nPara crear un vector utilizamos el comando c(), de combinar.\r\n\r\n\r\n# Vector numérico\r\nA <- c(1, 2, 2, 2, 1, 1, 1)\r\nA\r\n\r\n\r\n[1] 1 2 2 2 1 1 1\r\n\r\nclass(A)\r\n\r\n\r\n[1] \"numeric\"\r\n\r\n# Vector de caracteres\r\nB <- c(\"Uno\", \"Dos\", \"Dos\", \"Dos\", \"Uno\", \"Uno\", \"Uno\")\r\nB\r\n\r\n\r\n[1] \"Uno\" \"Dos\" \"Dos\" \"Dos\" \"Uno\" \"Uno\" \"Uno\"\r\n\r\nclass(B)\r\n\r\n\r\n[1] \"character\"\r\n\r\n# Vector de tipo factor\r\nC <- as.factor(A)\r\nC\r\n\r\n\r\n[1] 1 2 2 2 1 1 1\r\nLevels: 1 2\r\n\r\nclass(C)\r\n\r\n\r\n[1] \"factor\"\r\n\r\n# Defino etiquetas del vector numérico o caracter\r\nA\r\n\r\n\r\n[1] 1 2 2 2 1 1 1\r\n\r\nA_etiquetas <- factor(A,\r\n                     labels = c('Varón','Mujer'))\r\nA_etiquetas\r\n\r\n\r\n[1] Varón Mujer Mujer Mujer Varón Varón Varón\r\nLevels: Varón Mujer\r\n\r\nCon los vectores numéricos se pueden hacer operaciones como, por ejemplo: * sumarle 2 a cada elemento del vector anterior.\r\n\r\n\r\nD <- c(1, 3, 4)\r\nD <- D + 2\r\nD\r\n\r\n\r\n[1] 3 5 6\r\n\r\nsumarle 1 al primer elemento, 2 al segundo, y 3 al tercer elemento del vector anterior\r\n\r\n\r\nE <- D + 1:3 #esto es equivalente a hacer 3+1, 5+2, 6+9 \r\nE\r\n\r\n\r\n\r\n[1] 4 7 9\r\n\r\n1:3 significa que queremos todos los números enteros desde 1 hasta 3.\r\n\r\nEn R podemos quedarnos con algunos elemenos de los vectores para trabajar con o sobre ellos. Para acceder a un elemento del vector podemos buscarlo a través del número de orden, identificando al mismo utilizando los signos [ ]\r\n\r\n\r\n# Si quiero al elemento 2 del objeto E:\r\nE \r\n\r\n\r\n[1] 4 7 9\r\n\r\nE[2]\r\n\r\n\r\n[1] 7\r\n\r\nSi nos interesa quedarnos con dicho valor, al buscarlo lo asignamos a un nuevo objeto.\r\n\r\n\r\nE_posicion2 <-  E[2]\r\nE_posicion2\r\n\r\n\r\n[1] 7\r\n\r\nPara borrar un objeto del ambiente de trabajo, utilizamos la función rm()\r\n\r\n\r\nrm(E_posicion2)\r\n#E_posicion2\r\n\r\n\r\n\r\nTambién podemos cambiar el texto del segundo elemento de E, por el texto “Pablo”\r\n\r\n\r\nE\r\n\r\n\r\n[1] 4 7 9\r\n\r\nE[2] <- \"Pablo\"\r\nE\r\n\r\n\r\n[1] \"4\"     \"Pablo\" \"9\"    \r\n\r\n# Tener cuidado al modificar el tipo de uno de los valores y no el de todos los del objeto:\r\nclass(E)\r\n\r\n\r\n[1] \"character\"\r\n\r\nData Frames (o bases de datos)\r\nUn Data Frame es una estructura de datos de 2 dimensiones o tabla, donde cada columna representa una variable, y cada fila una observación.\r\nLos data frames pueden contener datos de diferentes clases. Puede ser considerado como un conjunto de vectores de igual tamaño, donde cada vector (columna) tiene que tener datos del mismo tipo, pero las clases de vectores que conforman la tabla pueden ser distintas. Entonces, cada observación (fila) está compuesta por datos que pueden ser de distinto tipo.\r\nEste objeto es central en el proceso de trabajo, ya que es la estructura más usada para realizar análisis de datos, y suele ser la forma en que se cargan datos externos para trabajar en el ambiente de R, y en que se exportan los resultados de nuestros trabajo.\r\nVeamos un ejemplo de data frame creado a partir de la combinación de vectores:\r\n\r\n\r\nAGLOMERADO  <- c(32,33,33,33,32)\r\n\r\nSEXO  <-  c(\"Varon\",\"Mujer\",\"Mujer\",\"Varon\",\"Mujer\")\r\n\r\nEDAD  <-  c(60,54,18,27,32)\r\n\r\nDatos <- data.frame(AGLOMERADO, SEXO, EDAD)\r\nDatos\r\n\r\n\r\n  AGLOMERADO  SEXO EDAD\r\n1         32 Varon   60\r\n2         33 Mujer   54\r\n3         33 Mujer   18\r\n4         33 Varon   27\r\n5         32 Mujer   32\r\n\r\nclass(Datos)\r\n\r\n\r\n[1] \"data.frame\"\r\n\r\nTal como en un vector podemos acceder a los elementos a través de los [ ], en un dataframe lo hacemos de la forma [fila, columna].\r\nEn los Data.Frames tenemos, por definición, más de una columna (variable). Para acceder a alguna de ellas podemos utilizar el operador $.\r\n\r\n\r\nDatos[3,2]\r\n\r\n\r\n[1] \"Mujer\"\r\n\r\nDatos[4,3]\r\n\r\n\r\n[1] 27\r\n\r\nDatos$AGLOMERADO\r\n\r\n\r\n[1] 32 33 33 33 32\r\n\r\nclass(Datos$AGLOMERADO)\r\n\r\n\r\n[1] \"numeric\"\r\n\r\nDatos$AGLOMERADO[2]\r\n\r\n\r\n[1] 33\r\n\r\n¿que pasa si hacemos Datos$AGLOMERADO[3,2] ?\r\nDatos$AGLOMERADO[3,2]\r\nNótese que el último comando tiene un número incorrecto de dimensiones, porque estamos refiriendonos 2 veces a la columna AGLOMERADO.\r\nAcorde a lo visto anteriormente, el acceso a los dataframes mediante [ ] puede utilizarse también para realizar filtros (devolver el o los valores en función de otro valor definido). Por ejemplo, puedo utilizar los [ ] para obtener del dataframe Datos unicamente los registros del AGLOMERADO 32:\r\n\r\n\r\nDatos[Datos$AGLOMERADO==32, ]\r\n\r\n\r\n  AGLOMERADO  SEXO EDAD\r\n1         32 Varon   60\r\n5         32 Mujer   32\r\n\r\nLa lógica del paso anterior sería: Accedo al dataframe Datos, pidiendo únicamente conservar las filas (por eso la condición se ubica a la izquierda de la ,) que cumplan el requisito de pertenecer a la categoría 32 de la variable AGLOMERADO.\r\nAún más, podría aplicar el filtro y al mismo tiempo identificar una variable de interés para luego realizar un cálculo sobre aquella. Por ejemplo, podría calcular la media de la edad para aquellas personas que residen en el aglomerado 32.\r\n###Por separado\r\nEdad_Aglo32 <- Datos$EDAD[Datos$AGLOMERADO==32]\r\nEdad_Aglo32\r\n\r\n\r\n#mean(Edad_Miembro1)\r\n\r\n# Otra forma de lograr el mismo resultado\r\nEdad_Aglo32 <- mean(Datos$EDAD[Datos$AGLOMERADO==32])\r\n\r\n\r\n\r\nLa lógica de esta sintaxis sería: “Me quedó con la variable EDAD, cuando la variable AGLOMERADO sea igual a 32, luego calculo la media de dichos valores”\r\n\r\nListas\r\nContienen una concatenación de objetos de cualquier tipo. Así como un vector contiene valores, un dataframe contiene vectores, una lista puede contener dataframes, pero también vectores, o valores, y todo ello a la vez\r\n\r\n\r\nLISTA <- list(A,B,C,D,E,Datos$AGLOMERADO, DF = Datos)\r\nLISTA\r\n\r\n\r\n[[1]]\r\n[1] 1 2 2 2 1 1 1\r\n\r\n[[2]]\r\n[1] \"Uno\" \"Dos\" \"Dos\" \"Dos\" \"Uno\" \"Uno\" \"Uno\"\r\n\r\n[[3]]\r\n[1] 1 2 2 2 1 1 1\r\nLevels: 1 2\r\n\r\n[[4]]\r\n[1] 3 5 6\r\n\r\n[[5]]\r\n[1] \"4\"     \"Pablo\" \"9\"    \r\n\r\n[[6]]\r\n[1] 32 33 33 33 32\r\n\r\n$DF\r\n  AGLOMERADO  SEXO EDAD\r\n1         32 Varon   60\r\n2         33 Mujer   54\r\n3         33 Mujer   18\r\n4         33 Varon   27\r\n5         32 Mujer   32\r\n\r\nTal como para con los Vectores y los Data.Frames, podemos acceder a un elemento de una lista, utilizando el operador $:\r\n\r\n\r\nLISTA$DF\r\n\r\n\r\n  AGLOMERADO  SEXO EDAD\r\n1         32 Varon   60\r\n2         33 Mujer   54\r\n3         33 Mujer   18\r\n4         33 Varon   27\r\n5         32 Mujer   32\r\n\r\nLISTA$DF$EDAD\r\n\r\n\r\n[1] 60 54 18 27 32\r\n\r\nLISTA$DF$EDAD[2]\r\n\r\n\r\n[1] 54\r\n\r\nTambién se pueden usar corchetes dobles [[]] para acceder a los distintos elementos de una lista.\r\n\r\n\r\nLISTA[[6]]\r\n\r\n\r\n[1] 32 33 33 33 32\r\n\r\nO para acceder a un valor/vector (dependiendo del tipo de elemento de la lista) de un objeto de la lista:\r\n\r\n\r\nLISTA[[6]][1]\r\n\r\n\r\n[1] 32\r\n\r\nLISTA[[7]][2]\r\n\r\n\r\n   SEXO\r\n1 Varon\r\n2 Mujer\r\n3 Mujer\r\n4 Varon\r\n5 Mujer\r\n\r\nLISTA[[7]][2,1]\r\n\r\n\r\n[1] 33\r\n\r\nFunciones (las herramientas del armario):\r\nLas funciones son series de procedimientos estandarizados, que toman como imput determinados argumentos a fijar por el usuario (llamados parámetros), y devuelven un resultado acorde a la aplicación de dichos procedimientos. Su lógica de funcionamiento es:funcion(argumento1 = arg1, argumento2 = arg2)\r\nA lo largo del curso iremos viendo numerosas funciones, según lo requieran los distintos ejercicios. Sin embargo, veamos ahora algunos ejemplos para comprender su funcionamiento:\r\npaste() : concatena una serie de caracteres, indicando por última instancia como separar a cada uno de ellos\r\npaste0(): concatena una serie de caracteres sin separar\r\nsum(): suma de todos los elementos de un vector\r\nmean() promedio aritmético de todos los elementos de un vector\r\n\r\npaste(\"Pega\",\"estas\", 4, \"palabras\", sep = \" \")\r\n\r\n\r\n\r\n[1] \"Pega estas 4 palabras\"\r\n\r\n#Puedo concatenar caracteres almacenados en objetos\r\na <- c(1, 2, 3)\r\nb <- \"con\"\r\nc <- c(4, 5, 6)\r\n\r\npaste(a,b,c,sep = \"-\")\r\n\r\n\r\n[1] \"1-con-4\" \"2-con-5\" \"3-con-6\"\r\n\r\n# Paste0 pega los caracteres sin separador\r\npaste0(a,b,c)\r\n\r\n\r\n[1] \"1con4\" \"2con5\" \"3con6\"\r\n\r\n# ¿Te acordás del comando que usamos?\r\n1:5\r\n\r\n\r\n[1] 1 2 3 4 5\r\n\r\n# Función para sumar\r\nsum(1:5)\r\n\r\n\r\n[1] 15\r\n\r\n# Para calclar medias\r\nmean(1:5)\r\n\r\n\r\n[1] 3\r\n\r\nInstalación de paquetes complementarios al R Base (¡más cajas de herramientas para el armarrio!)\r\nHasta aquí hemos visto múltiples funciones que están contenidas dentro del lenguaje básico de R. Ahora bien, al tratarse de un software libre, distintos usuarios de R contribuyen sistemáticamente a expandir este lenguaje mediante la creación y actualización de paquetes complementarios. Lógicamente, los mismos no están incluidos en la instalación inicial del programa, pero podemos descargarlos e instalarlos con el siguiente comando:\r\ninstall.packages(\"nombre_del_paquete\") \r\nAl ejecutar el comando se descargarán de la pagina de CRAN los archivos correspondientes al paquete hacia el directorio en donde hayamos instalado el programa. Típicamente los archivos se encontrarán en **C:Files.0**, siempre con la versión del programa correspondiente.\r\nLos paquetes sólo se instalan una vez en la computadora (si cambias de computadora, tenés que volver a instalarlo). Una vez instalado el paquete, cada vez que abramos una nueva sesión de R y querramos utilizar el mismo debemos cargarlo al ambiente de trabajo mediante la siguiente función:\r\nlibrary(nombre_del_paquete)\r\nNótese que al cargar/activar el paquete no son necesarias las comillas.\r\nPaquetes a utilizar a lo largo del curso:\r\nPara quienes esten trabajando con sus computadoras personales, dejamos a continuación un listado de los paquetes complementarios del R base que utilizaremos a lo largo del curso. Como la instalación requiere descargar múltiples archivos de internet recomendamos hacerlo cuando dispongan de una buena conexión. Con el siguiente comando podrían instalarlos todos de una vez:\r\ninstall.packages(c(\"tidyverse\",\"openxlsx\",'ggplot2','ggthemes', 'ggrepel','ggalt','kableExtra', 'rmarkdown'))\r\n\r\nveremos que existen ciertas excepciones con algunos paquetes más adelante.↩︎\r\n",
      "last_modified": "2021-05-23T19:42:41-03:00"
    },
    {
      "path": "01_r_intro_practica.html",
      "title": "01 - R base",
      "author": [],
      "contents": "\r\nPractica independiente\r\n\r\nCrear un OBJETO llamado COSA cuyo contenido sea el resultado de la multiplicación: 5*6\r\nCrear un VECTOR llamado VEC0 que contenga los números 10, 20, 30.\r\nModificar el segundo elemento de VEC0, asignandole el valor 40\r\nCrear 3 vectores (llamarlos VEC1, VEC2, VEC3). con la misma cantidad de elementos que VEC0, pero con variables de tipo character (texto).\r\nCrear un dataframe (llamarla: BASE_DATOS) que contenga los vectores creados previamente\r\nCrear un objeto llamado OTRA_COSA que guarde el valor contenido en la segunda fila y tercera columna del dataframe BASE_DATOS\r\n\r\n\r\n\r\n",
      "last_modified": "2021-05-23T19:42:42-03:00"
    },
    {
      "path": "01_r_intro_presentacion.html",
      "title": "Programa",
      "description": "Hoja de Ruta del Curso\n",
      "author": [],
      "contents": "\r\nCLASES\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2021-05-23T19:42:43-03:00"
    },
    {
      "path": "about.html",
      "title": "About this site",
      "description": "Some additional details about the website",
      "author": [],
      "contents": "\r\n\r\n\r\n\r\n",
      "last_modified": "2021-05-23T19:42:44-03:00"
    },
    {
      "path": "biblio.html",
      "title": "Bibliografía",
      "description": "Lecturas recomendadas y materiales de apoyo\n",
      "author": [],
      "contents": "\r\nPRINCIPAL\r\nIntro a R: Ciencia de Datos para Gente Sociable\r\nProgramación: R para Ciencia de Datos (Traducción de R for Data Science), Garrett Grolemund, Hadley Wickham.\r\nVisualización: ggplot2: Elegant Graphics for Data Analysis, Hadley Wickham.\r\nCONSULTA\r\nGENERAL\r\nAnalizaR Datos Políticos, Francisco Urdinez y Andrés Cruz Labrín (Editores).\r\nCiencia de Datos para Gente Sociable, Antonio Vazquez Brust.\r\nCiencia de datos para curiosos, Martín Montané.\r\nDATA VIZ\r\nData Visualizaction: A Practival Introduction, Kieran Healey.\r\nFundamentals of Data Visualization, Claus Wilke.\r\nGEO\r\nHerramientas de análisis espacial en R, Martín Montané.\r\n\r\n\r\n\r\n",
      "last_modified": "2021-05-23T19:42:45-03:00"
    },
    {
      "path": "bio.html",
      "title": "Profe",
      "description": "\\¿guien so? \n",
      "author": [],
      "contents": "\r\nPablo Tiscornia\r\nSociólogo (UBA), especializado en metodología, producción y procesamiento de datos estadísticos, principalmente en el ámbito público.\r\nMe intrigan los procesos de trabajo, eso y eso también.\r\nMi experiencias con R pasaron por la participación y organización de la comunidad de R en Buenos Aires y el desarrollo de paquetes de R para facilitar herramientas y el acceso a datos de la Encuesta Permanente de Hogares - INDEC.\r\nicons::fontawesome(“twitter”)](https://twitter.com/pabblo_h) [TuQmano](https://twitter.com/pabblo_h) icons::fontawesome(\"github\")](https://github.com/pablotis) /pablotis\r\n\r\n\r\n\r\n",
      "last_modified": "2021-05-23T19:42:46-03:00"
    },
    {
      "path": "index.html",
      "title": "Introducción al procesamiento de datos con R para Ciencias Sociales",
      "description": "Aplicación práctica en la EPH-INDEC",
      "author": [],
      "contents": "\r\nObjetivos del curso\r\nEl presente taller tiene como objetivo principal introducirse en el aprendizaje del lenguaje de programación R, aplicado al procesamiento de la Encuesta Permanente de Hogares (EPH - INDEC). Se apunta a brindar a los y las participantes herramientas prácticas para el procesamiento de datos, haciendo énfasis en la producción y el análisis de estadísticas socioe-conómicas con el objetivo de abrir puertas a la realización de investigaciones propias sobre diversas temáticas vinculadas al mercado de trabajo y las condiciones de vida de la población.\r\nLa Encuesta Permanente de Hogares representa un insumo fundamental para realizar estudios sobre el mercado de trabajo y las condiciones de vida de la población. Se hará una introducción a los lineamientos conceptuales principales de la encuesta, en pos de que los y las participantes puedan abordar con datos distintas problemáticas vinculadas al mercado de trabajo y las condiciones de vida de la población.\r\nContenido:\r\nMódulo 1: Conceptos Principales de EPH:\r\nPresentación del curso.\r\nPresentación de la Encuesta Permanente de Hogares: Lineamientos conceptuales y metodología\r\nAbordaje del marco teórico y analítico de la EPH y sus aplicaciones prácticas.\r\nSíntesis del operativo de campo, cobertura y periodicidad de la Encuesta\r\nDefiniciones de las principales variables de interés a abordar en el curso: Condición de actividad, categoría ocupacional, precariedad y pobreza\r\nMetodología usuaria de las Bases de microdatos. Utilización del Diseño de Registro.\r\nMódulo 2: R Base y proyectos de trabajo:\r\nComandos básicos de R base (vectores, objetos, bases de datos)\r\nDiseñar un proyecto de trabajo\r\nImportación y exportación de archivos\r\nMódulo 3: Procesamiento de datos con el paquete Tidyverse y eph:\r\nDescripción del programa “R”. Lógica sintáctica del lenguaje y comandos básicos\r\nLimpieza de Base de datos: Renombrar y recodificar variables, tratamiento de valores faltantes (missing values/ NA´s)\r\nSeleccionar variables, ordenar y agrupar la base de datos para realizar cálculos\r\nCreación de nuevas variables\r\nAplicar filtros sobre la base de datos\r\nConstruir medidas de resumen de la información\r\nTratamiento de variables numéricas (edad, ingresos, horas de trabajo, cantidad de hijos / componentes del hogar, entre otras).\r\nCálculo de tasas básicas del mercado de trabajo (tasa de actividad, empleo, desempleo, entre otras)\r\nCálculo de tasas para distintos subconjuntos poblacionales (por aglomerado, sexo, grupos de edad)\r\n\r\nMódulo 4: Visualización de la información con ggplot2\r\nGráficos elaborados en R (función “ggplot”):\r\nGráficos de línea, barras, Boxplots\r\nExtensiones de ggplot\r\n\r\nMódulo 5: Técnica de panel con la EPH\r\nAlcances y límites en el uso de la técnica de panel con la EPH.\r\nConstrucción y análisis de la matríz del flujo entre categorías de la condición de actividad entre dos trimestres.\r\nCronograma:\r\nCantidad de clases: 4.\r\nCantidad de horas por clase: 3hs.\r\nDía de cursada: x de a a b hs.\r\n\r\n\r\nxaringanExtra::embed_xaringan(\r\n  url = \"https://pablotis.github.io/prueba_presentaciones/#1\",\r\n  ratio = \"16:9\"\r\n)\r\n\r\n\r\n\r\n\r\nfitvids('.shareagain', {players: 'iframe'});\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2021-05-23T19:42:48-03:00"
    },
    {
      "path": "puesta_a_punto.html",
      "title": "Puesta a punto",
      "description": "Instalación y ajustes para comenzar el curso\n",
      "author": [],
      "contents": "\r\nDinámica de taller\r\nEste taller está pensado para ser esencialmente práctico. La idea es exponer una presentación por módulo, en donde cada 3 o 4 conceptos se le dedicará un tiempo para poder ejercitar lo visto, previo a continuar con el siguiente contenido.\r\nSe recomienda seguir las presentaciones durante la exposición ya que de ellas se extraerá el código, haciendo más ágil la cursada.\r\nInstalación de R\r\nAsegurate de tener instalado R en tu computadora previo a comenzar el taller. Desde (R-project)[https://www.r-project.org/] vas a poder hacerte de R.\r\nSugerencia: instalar (rtools)[https://cran.r-project.org/bin/windows/Rtools/], herramienta para poder trabajar con el paquete tidyverse.\r\nInstalación de Rstudio\r\nRstudio es la plataforma desde donde se trabajará durante todo el taller. Si bien debemos tener instalado R, el programa que se abrirá en cada clase y desde donde haremos los ejercicios es Rstudio.\r\n(Descargar Rstudio)[https://www.rstudio.com/products/rstudio/download/#download]\r\n\r\n\r\n\r\n",
      "last_modified": "2021-05-23T19:42:50-03:00"
    },
    {
      "path": "software.html",
      "title": "Software",
      "description": "Herramientas y programas\n",
      "author": [],
      "contents": "\r\nConfigurar\r\nSlack - Espacio de trabajo\r\n.git& Github- Control de versiones + DEV\r\nR - CRAN (The Comprehensive R Archive Network)\r\nRStudio IDE (Integrated Development Environment)\r\n\r\n\r\n\r\n",
      "last_modified": "2021-05-23T19:42:51-03:00"
    }
  ],
  "collections": []
}
